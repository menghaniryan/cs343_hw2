## Information
Members: Ryan Menghani(rvm447) and Johnny Hoang()
Project: HW2
Date: 10/02/18
Section: 51580


Lab Report Notes

(1) How the STRIPS planner solves the 2-disk problem and why it ends up in an i
nfinite loop in the 3-disk case.

The original STRIPS planner works by satisfying the given list of goals in order,
re-adding goals that have been clobbered to the back of the list. Once every 
goal has been satisfied, the planner finishes and returns with its solution 
plan.

For each goal, the planner generates a list of actions that would satisfy the 
given goal. It then iterates through that list, choosing the first valid action.
Each action has a set of preconditions that must be met in order to carry out the
action. The planner goes through each precondition, checking if the precondition
is satisfied by the current state. If a precondition is not met, then the 
planner generates a list of actions that would satisfy said precondition if 
they were carried out. These actions have their own preconditions, and the 
planner repeats this process, creating additional layers of action-precondition
pairs until all of the preconditions of a given action are fufilled, and the 
action is made, and the planner returns to the previous action-recondition layer.
The planner continues to do this, trying other actions if the first does not 
work. When the planner reaches the original goal level again, the planner has
found a plan to satisfy that goal, counts that goal as fufilled, and attempts 
to satisfy the next goal in the goal list.

The generated lists of actions are ordered by the number of unmet preconditions
they have.

This initial version of the STRIPS planner solves the 2-disk problem. Since there
are only two disks in the problem, not much planning has to be done in order to
find a solution. It starts with two goals: disk1 needs to be on disk2 and disk2
needs to be on pole3. The first goal is fufilled at the beginning of the planning,
so the planner always starts planning by trying to fufill the second goal. It then
generates a list of actions that would fufill that goal, namely moving disk2 from
any of the other objects in the environment to pole3 (from pole1, disk1, and pole2).
Since moving disk2 from pole1 has the smallest number of unmet preconditions (1, 
clear(disk2), others (on pole1 and clear pole3) are met), it chooses to do that,
and tries to meet the remaining required precondition (clear disk2). In order to do
this, again, the planner generates a list of moves and chooses the one with the
fewest number of unmet preconditions. Two moves have 1 unmet precondition:
move to pole2 and pole3. Since moving to pole3 would violate a precondition it is
attempting to fufill for a previous action (clear pole3), the planner
does not choose that action, and chooses to move to pole2. This action has all of
its preconditions met, and the planner goes back up to the move disk2 to pole 3 level,
which has just had its remaining precondition met, which causes the goal of having
disk2 on pole3 to be fufilled. In fufilling this goal, the goal of having disk1
be on disk2 is clobbered if this goal was achieved before disk2 on pole3. The
planner then attemts to fufill this goal in a likewise manner to the previous
process. (move disk1 from pole2 to disk2).  It does this easily, and the
2-disk problem is solved.

However, when the original STRIPS planner attempts to solve the 3-disk problem,
the planner, which had worked for the 2 disk solution, ran into an infinite loop.
This occurs because the planner runs into a circular dependency of subgoals. 
For example, assume that the planner needs to solve subgoal A to solve the 
problem. In order to solve subgoal A, it needs to solve subgoal B. In order to 
solve subgoal B, it needs to solve subgoal C. And finally,
in order to solve subgoal C it needs to solve subgoal A. Since the state has not
changed, as the planner has not planned any moves, an infinite loop occurs as the
planner will infinitely generate the same mutually dependent moves. 

For example, this scenario can occur when the planner tries to clear a disk, 
call it A, but A has more than one disk above it. As the planner tries to 
clear A, the disks on top of it must 
be moved. However, due to the default ordering of movements, the planner may try to move disks above the 
disk directly on top of A onto A, which has clear(A) as a precondition. This will result
in the infinite loop described above, since the moves are generated deterministically. 

(2) Why your modification of the STRIPS planner manages to solve the problem. 

The planner used the function linear_solver_helper() to implement STRIPS planning. Inside the 
linear_solver_helper() method, the possible moves that the planner can make are generated.
These possible actions are sorted using the heuristic function "initial_state_distance". As stated
earlier, this function sorts the generated actions by the number of preconditions met, placing
the actions that have the most preconditions met at the beginning of the list.

This is where we decided to make modifications to the planner: the movement ordering function. 
The problem with the initial way of ordering moves is that it treated every unmet precondition 
equally, ordering moves with the same number of unmet preconditions arbitrarily.
The scenario described above, with a circular dependency causing the planner to loop forever,
must be avoided, and treating all preconditions equally allows for it to occur.

Each unmet precondition implies moves, since the planner must move a disk to change the state of the environment,
and some preconditions imply more potential moves than other preconditions, so we decided to weigh each precondition
differently, based on approximately how many more moves are required fix a given precondition relative to another
precondition.

We decided that the "On" precondition was the most expensive precondition, because it essentially includes the other
preconditions. It includes the other preconditions because in order to resolve a given disk to not being on another, 
that disk must be smaller than the other, and the other disk must be cleared in order to place the given disk on it.
Since the "On" precondition includes 2 other preconditions, we weighed it 3.

We decided that the "Clear" precondition should be weighed with a 2, and the "smaller" precondition a 1,
following similar reasoning as above.

Therefore, the list of actions is sorted so that the moves that require the least amount of
additional work to do are prioritized. This avoids the circular dependency because the moves that lead
to a circular dependency (move a disk to a disk below it) require more work to do than alteratives,
and are thus passed over by the planner in favor of other moves.

In this way, our altered STRIPS planner solves the 3-disk problem.

(3) Whether there are examples of scenarios where your implementation fails.
We tested our planner on greater numbers of disks, and it has found solutions to 4-disk, 5-disk, and 6-disk,
scenarios with all of the disks starting on the leftmost pole. The planner also works on the 7-disk scenario and 
shuffled scenarios (where the disks begin in various positions) if the MAX_ACTIVATION_COUNT variable in mystrips.py,
which limits the number of recursive calls is increased.